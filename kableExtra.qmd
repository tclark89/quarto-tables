## kableExtra: The Next Step

kableExtra is a library that makes it much easier to build on `knitr::kable` 
  tables without having to muck around with CSS.
  
```{r}
#| label: load-kableExtra
library(kableExtra)
```


```{r}
#| label: kableExtra-more-options
mtcars |> 
  head() |> 
  kable(
    col.names = c("Miles/(US) Gallon", "Number of Cylinders",
                  "Displacement (cu. in.)", "Gross Horsepower", "Rear Axle Ratio",
                  "Weight (1000 lbs.)", "1/4 Mile Time", 
                  "Engine (0=V-shaped, 1=Straight",
                  "Transmission: (0=automatic, 1=manual)",
                  "Number of Forward Gears",
                  "Number of Carburetors"),
    caption = "Motor Trend Car Road Tests",
    align = "r",
    digits=c(1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0)
  )
```

`knitr::kable` and `kableExtra::kable` are basically identical functions, as 
  seen above. `kableExtra` also includes the `kbl` function, which produces 
  kable tables but has better auto-completion and help info for the various 
  options `knitr` has under the hood, especially for TeX tables.

### Getting Started

The fast way to clean up a `kable` is to add one of the functions from `kableExtra`:

-   `kable_classic`
-   `kable_classic_2`
-   `kable_material`
-   `kable_material_dark`
-   `kable_minimal`
-   `kable_paper`

Examples (with code and some columns omited for brevity):

```{r}
#| label: kable-func

# creates a basic kable to pipe into the syling options:
kableFunc <- function(caption){
  mtcars[1:6] |> 
    head() |> 
    kbl(
      caption = caption,
      align = "r",
    )
}
```

```{r}
#| label: kable-classic
kableFunc(caption = "kable_classic") |> 
  kable_classic()
```

```{r}
#| label: kable-classic-2

kableFunc(caption = "kable_classic_2") |> 
  kable_classic_2() 
```

```{r}
#| label: kable-material

kableFunc(caption = "kable_material") |> 
  kable_material()
```

```{r}
#| label: kable-material-dark

kableFunc(caption = "kable_material_dark") |> 
  kable_material_dark()
```

```{r}
#| label: kable-minimal

kableFunc(caption = "kable_minimal") |> 
  kable_minimal()
```

```{r}
#| label: kable-paper

kableFunc(caption = "kable_paper") |> 
  kable_paper()
```

All of these options provide pretty good tables. When further customization is 
  desired, enter: `kable_styling`.

### Getting Stylish

The `kable_styling` function can be used to further customize the table with ease. 
  The `bootstrap_options` option allows the user to specify options such as 
  `basic`, `striped`, `bordered` and more. 
  See `help(kable_styling)` for more information. 
  I like to use `c("striped", "responsive", "hover")` as a starting point for 
  HTML tables.

```{r}
#| label: kable-styling-ex1
kableFunc(caption="Striped, Responsive, Hover") |> 
  kable_styling(bootstrap_options = c("striped", "responsive", "hover"))
```

These options can be used on basic `kable` tables or those styled with the 
  various functions above.

```{r}
#| label: kable-classic2-striped
kableFunc(caption = "kable_classic_2 + bootstrap options") |> 
  kable_classic_2() |> 
  kable_styling(bootstrap_options = c("striped", "border"))
```

### Columns and Rows and Footnotes, oh my!

`kableExtra` allows us to group columns and rows with the `add_header_above` 
  and `pack_rows` function.
  
```{r}
#| label: pack-rows-add-header
mtcars[c(1:2, 8:14, 20:21),1:7] |> 

  kbl() |> 
  kable_styling(bootstrap_options = c("responsive", "hover", "striped")) |> 
  pack_rows(group_label = "Mazda", start_row = 1, end_row = 2, 
            italic = T, color="red") |>
  pack_rows(group_label = "Mercury", start_row = 3, end_row = 9, 
            underline = T, color="green") |>
  pack_rows(group_label = "Toyota", start_row = 10, end_row = 11,
            strikeout = T, color="blue") |>
  add_header_above(header = c(" "=2, "Engine Stats"=3, " "=3),
                   angle=10) |> 
  footnote(general = "Mtcars dataset")
```

The `add_header_above` function takes a named character vector to
  specify which columns to group and the name to give them. You can
  also specify if the headers should be bold, angled, pink, etc.
  `pack_rows` can be called that way, but can also be called on
  a group-by-group basis by specifying the start and end rows
  and the disply options desired.

In addition to grouping rows and columns, kableExtra allows you to
  specify column width/row height, colors, 